// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace ArgonneDashboard.ArgonneServiceClient.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// A device within the Argonne system
    /// </summary>
    public partial class DeviceDto
    {
        /// <summary>
        /// Initializes a new instance of the DeviceDto class.
        /// </summary>
        public DeviceDto() { }

        /// <summary>
        /// Initializes a new instance of the DeviceDto class.
        /// </summary>
        public DeviceDto(string primaryKey, string deviceName, Guid? deviceId = default(Guid?), Guid? campaignId = default(Guid?), string address = default(string), string address2 = default(string), string address3 = default(string), string city = default(string), string stateProvince = default(string), string postalCode = default(string), DateTime? activeFrom = default(DateTime?), DateTime? activeTo = default(DateTime?), string timezone = default(string))
        {
            DeviceId = deviceId;
            PrimaryKey = primaryKey;
            DeviceName = deviceName;
            CampaignId = campaignId;
            Address = address;
            Address2 = address2;
            Address3 = address3;
            City = city;
            StateProvince = stateProvince;
            PostalCode = postalCode;
            ActiveFrom = activeFrom;
            ActiveTo = activeTo;
            Timezone = timezone;
        }

        /// <summary>
        /// Globally unique identifier for a device assgined by Argonne system
        /// </summary>
        [JsonProperty(PropertyName = "deviceId")]
        public Guid? DeviceId { get; set; }

        /// <summary>
        /// Identifier for a device assigned by Azure IOT Hub
        /// </summary>
        [JsonProperty(PropertyName = "primaryKey")]
        public string PrimaryKey { get; set; }

        /// <summary>
        /// User friendly name for a device
        /// </summary>
        [JsonProperty(PropertyName = "deviceName")]
        public string DeviceName { get; set; }

        /// <summary>
        /// Current Campaign assigned to device
        /// </summary>
        [JsonProperty(PropertyName = "campaignId")]
        public Guid? CampaignId { get; set; }

        /// <summary>
        /// Device location, Address line 1
        /// </summary>
        [JsonProperty(PropertyName = "address")]
        public string Address { get; set; }

        /// <summary>
        /// Device location, Address line 2
        /// </summary>
        [JsonProperty(PropertyName = "address2")]
        public string Address2 { get; set; }

        /// <summary>
        /// Device location, Address line 3
        /// </summary>
        [JsonProperty(PropertyName = "address3")]
        public string Address3 { get; set; }

        /// <summary>
        /// Device location, City
        /// </summary>
        [JsonProperty(PropertyName = "city")]
        public string City { get; set; }

        /// <summary>
        /// Device location, State or Province Abbreviation
        /// </summary>
        [JsonProperty(PropertyName = "stateProvince")]
        public string StateProvince { get; set; }

        /// <summary>
        /// Device location, Postal Code
        /// </summary>
        [JsonProperty(PropertyName = "postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// Operating hours start time for the device
        /// </summary>
        [JsonProperty(PropertyName = "activeFrom")]
        public DateTime? ActiveFrom { get; set; }

        /// <summary>
        /// Operating hours end time for the device
        /// </summary>
        [JsonProperty(PropertyName = "activeTo")]
        public DateTime? ActiveTo { get; set; }

        /// <summary>
        /// Timezone of device
        /// </summary>
        [JsonProperty(PropertyName = "timezone")]
        public string Timezone { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (PrimaryKey == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PrimaryKey");
            }
            if (DeviceName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DeviceName");
            }
        }
    }
}
