// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace ArgonneDashboard.ArgonneServiceClient
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for ArgonneAPI.
    /// </summary>
    public static partial class ArgonneAPIExtensions
    {
            /// <summary>
            /// Get all Ads
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            public static IList<AdDto> ApiAdminAdGet(this IArgonneAPI operations, int? pageNumber = default(int?), int? pageSize = default(int?))
            {
                return Task.Factory.StartNew(s => ((IArgonneAPI)s).ApiAdminAdGetAsync(pageNumber, pageSize), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all Ads
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AdDto>> ApiAdminAdGetAsync(this IArgonneAPI operations, int? pageNumber = default(int?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAdminAdGetWithHttpMessagesAsync(pageNumber, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new Ad
            /// </summary>
            /// Id field does not need to be supplied, it is ignored. The unique
            /// identifier for the Ad will be generated by the system.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='item'>
            /// </param>
            public static AdDto ApiAdminAdPost(this IArgonneAPI operations, AdDto item = default(AdDto))
            {
                return Task.Factory.StartNew(s => ((IArgonneAPI)s).ApiAdminAdPostAsync(item), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new Ad
            /// </summary>
            /// Id field does not need to be supplied, it is ignored. The unique
            /// identifier for the Ad will be generated by the system.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='item'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AdDto> ApiAdminAdPostAsync(this IArgonneAPI operations, AdDto item = default(AdDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAdminAdPostWithHttpMessagesAsync(item, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a Ad by id
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// unique identifier for a Ad
            /// </param>
            public static AdDto ApiAdminAdByIdGet(this IArgonneAPI operations, string id)
            {
                return Task.Factory.StartNew(s => ((IArgonneAPI)s).ApiAdminAdByIdGetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a Ad by id
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// unique identifier for a Ad
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AdDto> ApiAdminAdByIdGetAsync(this IArgonneAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAdminAdByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Modify an existing Ad
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// unique identifier for a Ad
            /// </param>
            /// <param name='updatedRecord'>
            /// modified Ad model
            /// </param>
            public static void ApiAdminAdByIdPut(this IArgonneAPI operations, string id, AdDto updatedRecord = default(AdDto))
            {
                Task.Factory.StartNew(s => ((IArgonneAPI)s).ApiAdminAdByIdPutAsync(id, updatedRecord), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Modify an existing Ad
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// unique identifier for a Ad
            /// </param>
            /// <param name='updatedRecord'>
            /// modified Ad model
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAdminAdByIdPutAsync(this IArgonneAPI operations, string id, AdDto updatedRecord = default(AdDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiAdminAdByIdPutWithHttpMessagesAsync(id, updatedRecord, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Delete an existing Ad
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// unique identifier for a Ad
            /// </param>
            public static void ApiAdminAdByIdDelete(this IArgonneAPI operations, string id)
            {
                Task.Factory.StartNew(s => ((IArgonneAPI)s).ApiAdminAdByIdDeleteAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an existing Ad
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// unique identifier for a Ad
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAdminAdByIdDeleteAsync(this IArgonneAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiAdminAdByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get all campaigns an ad is in
            /// </summary>
            /// The relationship between Ad and Campaign is read-only from the Ad API.
            /// For create/update/delete operations see the Campaign API.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// unique identifier for an ad
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            public static IList<AdInCampaignDto> ApiAdminAdByIdCampaignsGet(this IArgonneAPI operations, string id, int? pageNumber = default(int?), int? pageSize = default(int?))
            {
                return Task.Factory.StartNew(s => ((IArgonneAPI)s).ApiAdminAdByIdCampaignsGetAsync(id, pageNumber, pageSize), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all campaigns an ad is in
            /// </summary>
            /// The relationship between Ad and Campaign is read-only from the Ad API.
            /// For create/update/delete operations see the Campaign API.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// unique identifier for an ad
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AdInCampaignDto>> ApiAdminAdByIdCampaignsGetAsync(this IArgonneAPI operations, string id, int? pageNumber = default(int?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAdminAdByIdCampaignsGetWithHttpMessagesAsync(id, pageNumber, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get All Impressions for an ad
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='adid'>
            /// unique identifier for an ad
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            public static IList<ImpressionDto> ApiAdminAdByAdidImpressionsGet(this IArgonneAPI operations, string adid, int? pageNumber = default(int?), int? pageSize = default(int?))
            {
                return Task.Factory.StartNew(s => ((IArgonneAPI)s).ApiAdminAdByAdidImpressionsGetAsync(adid, pageNumber, pageSize), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get All Impressions for an ad
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='adid'>
            /// unique identifier for an ad
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ImpressionDto>> ApiAdminAdByAdidImpressionsGetAsync(this IArgonneAPI operations, string adid, int? pageNumber = default(int?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAdminAdByAdidImpressionsGetWithHttpMessagesAsync(adid, pageNumber, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get All Impressions for a campaign
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='adid'>
            /// unique identifier for a campaign
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='after'>
            /// timestamp for start of series
            /// </param>
            public static IList<ImpressionDto> ApiAdminAdByAdidImpressionsAfterGet(this IArgonneAPI operations, string adid, int? pageNumber = default(int?), int? pageSize = default(int?), DateTime? after = default(DateTime?))
            {
                return Task.Factory.StartNew(s => ((IArgonneAPI)s).ApiAdminAdByAdidImpressionsAfterGetAsync(adid, pageNumber, pageSize, after), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get All Impressions for a campaign
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='adid'>
            /// unique identifier for a campaign
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='after'>
            /// timestamp for start of series
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ImpressionDto>> ApiAdminAdByAdidImpressionsAfterGetAsync(this IArgonneAPI operations, string adid, int? pageNumber = default(int?), int? pageSize = default(int?), DateTime? after = default(DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAdminAdByAdidImpressionsAfterGetWithHttpMessagesAsync(adid, pageNumber, pageSize, after, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all campaigns
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            public static IList<CampaignDto> ApiAdminCampaignGet(this IArgonneAPI operations, int? pageNumber = default(int?), int? pageSize = default(int?))
            {
                return Task.Factory.StartNew(s => ((IArgonneAPI)s).ApiAdminCampaignGetAsync(pageNumber, pageSize), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all campaigns
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CampaignDto>> ApiAdminCampaignGetAsync(this IArgonneAPI operations, int? pageNumber = default(int?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAdminCampaignGetWithHttpMessagesAsync(pageNumber, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Modify an existing Campaign
            /// </summary>
            /// Campaign Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updatedRecord'>
            /// modified Campaign model
            /// </param>
            public static void ApiAdminCampaignPut(this IArgonneAPI operations, CampaignDto updatedRecord = default(CampaignDto))
            {
                Task.Factory.StartNew(s => ((IArgonneAPI)s).ApiAdminCampaignPutAsync(updatedRecord), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Modify an existing Campaign
            /// </summary>
            /// Campaign Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updatedRecord'>
            /// modified Campaign model
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAdminCampaignPutAsync(this IArgonneAPI operations, CampaignDto updatedRecord = default(CampaignDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiAdminCampaignPutWithHttpMessagesAsync(updatedRecord, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a new Campaign
            /// </summary>
            /// Id field does not need to be supplied, it is ignored. The unique
            /// identifier for the Campaign will be generated by the system.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='item'>
            /// </param>
            public static CampaignDto ApiAdminCampaignPost(this IArgonneAPI operations, CampaignDto item = default(CampaignDto))
            {
                return Task.Factory.StartNew(s => ((IArgonneAPI)s).ApiAdminCampaignPostAsync(item), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new Campaign
            /// </summary>
            /// Id field does not need to be supplied, it is ignored. The unique
            /// identifier for the Campaign will be generated by the system.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='item'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CampaignDto> ApiAdminCampaignPostAsync(this IArgonneAPI operations, CampaignDto item = default(CampaignDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAdminCampaignPostWithHttpMessagesAsync(item, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a campaign by id
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// unique identifier for a campaign
            /// </param>
            public static CampaignDto ApiAdminCampaignByIdGet(this IArgonneAPI operations, string id)
            {
                return Task.Factory.StartNew(s => ((IArgonneAPI)s).ApiAdminCampaignByIdGetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a campaign by id
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// unique identifier for a campaign
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CampaignDto> ApiAdminCampaignByIdGetAsync(this IArgonneAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAdminCampaignByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an existing Campaign
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// unique identifier for a Campaign
            /// </param>
            public static void ApiAdminCampaignByIdDelete(this IArgonneAPI operations, string id)
            {
                Task.Factory.StartNew(s => ((IArgonneAPI)s).ApiAdminCampaignByIdDeleteAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an existing Campaign
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// unique identifier for a Campaign
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAdminCampaignByIdDeleteAsync(this IArgonneAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiAdminCampaignByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get all ads for a campaign
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='campaignid'>
            /// unique identifier for a campaign
            /// </param>
            public static IList<AdInCampaignDto> ApiAdminCampaignByCampaignidAdsGet(this IArgonneAPI operations, string campaignid)
            {
                return Task.Factory.StartNew(s => ((IArgonneAPI)s).ApiAdminCampaignByCampaignidAdsGetAsync(campaignid), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all ads for a campaign
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='campaignid'>
            /// unique identifier for a campaign
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AdInCampaignDto>> ApiAdminCampaignByCampaignidAdsGetAsync(this IArgonneAPI operations, string campaignid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAdminCampaignByCampaignidAdsGetWithHttpMessagesAsync(campaignid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get ad in a campaign
            /// </summary>
            /// Id must be a valid GUID
            /// AdId must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='campaignid'>
            /// unique identifier for a campaign
            /// </param>
            /// <param name='adid'>
            /// unique identifier for an ad
            /// </param>
            public static AdInCampaignDto ApiAdminCampaignByCampaignidAdsByAdidGet(this IArgonneAPI operations, string campaignid, string adid)
            {
                return Task.Factory.StartNew(s => ((IArgonneAPI)s).ApiAdminCampaignByCampaignidAdsByAdidGetAsync(campaignid, adid), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get ad in a campaign
            /// </summary>
            /// Id must be a valid GUID
            /// AdId must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='campaignid'>
            /// unique identifier for a campaign
            /// </param>
            /// <param name='adid'>
            /// unique identifier for an ad
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AdInCampaignDto> ApiAdminCampaignByCampaignidAdsByAdidGetAsync(this IArgonneAPI operations, string campaignid, string adid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAdminCampaignByCampaignidAdsByAdidGetWithHttpMessagesAsync(campaignid, adid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove an ad from a campaign
            /// </summary>
            /// Id must be a valid GUID.
            /// AdId must be a valid GUID.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='campaignid'>
            /// unique identifier for a Campaign
            /// </param>
            /// <param name='adid'>
            /// unique identifier for an ad
            /// </param>
            public static void ApiAdminCampaignByCampaignidAdsByAdidDelete(this IArgonneAPI operations, string campaignid, string adid)
            {
                Task.Factory.StartNew(s => ((IArgonneAPI)s).ApiAdminCampaignByCampaignidAdsByAdidDeleteAsync(campaignid, adid), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove an ad from a campaign
            /// </summary>
            /// Id must be a valid GUID.
            /// AdId must be a valid GUID.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='campaignid'>
            /// unique identifier for a Campaign
            /// </param>
            /// <param name='adid'>
            /// unique identifier for an ad
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAdminCampaignByCampaignidAdsByAdidDeleteAsync(this IArgonneAPI operations, string campaignid, string adid, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiAdminCampaignByCampaignidAdsByAdidDeleteWithHttpMessagesAsync(campaignid, adid, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Modify properties of an existing Campaign to Ad relationship
            /// </summary>
            /// Campaign Id must be a valid GUID.
            /// Ad Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updatedRecord'>
            /// modified model
            /// </param>
            public static void ApiAdminCampaignAdsPut(this IArgonneAPI operations, AdInCampaignDto updatedRecord = default(AdInCampaignDto))
            {
                Task.Factory.StartNew(s => ((IArgonneAPI)s).ApiAdminCampaignAdsPutAsync(updatedRecord), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Modify properties of an existing Campaign to Ad relationship
            /// </summary>
            /// Campaign Id must be a valid GUID.
            /// Ad Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updatedRecord'>
            /// modified model
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAdminCampaignAdsPutAsync(this IArgonneAPI operations, AdInCampaignDto updatedRecord = default(AdInCampaignDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiAdminCampaignAdsPutWithHttpMessagesAsync(updatedRecord, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Add an Ad to a Campaign
            /// </summary>
            /// An add can be in multiple campaigns at the same time
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='item'>
            /// </param>
            public static AdInCampaignDto ApiAdminCampaignAdsPost(this IArgonneAPI operations, AdInCampaignDto item = default(AdInCampaignDto))
            {
                return Task.Factory.StartNew(s => ((IArgonneAPI)s).ApiAdminCampaignAdsPostAsync(item), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add an Ad to a Campaign
            /// </summary>
            /// An add can be in multiple campaigns at the same time
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='item'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AdInCampaignDto> ApiAdminCampaignAdsPostAsync(this IArgonneAPI operations, AdInCampaignDto item = default(AdInCampaignDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAdminCampaignAdsPostWithHttpMessagesAsync(item, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all Devices for a campaign
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='campaignid'>
            /// unique identifier for a campaign
            /// </param>
            public static IList<DeviceDto> ApiAdminCampaignByCampaignidDevicesGet(this IArgonneAPI operations, string campaignid)
            {
                return Task.Factory.StartNew(s => ((IArgonneAPI)s).ApiAdminCampaignByCampaignidDevicesGetAsync(campaignid), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all Devices for a campaign
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='campaignid'>
            /// unique identifier for a campaign
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DeviceDto>> ApiAdminCampaignByCampaignidDevicesGetAsync(this IArgonneAPI operations, string campaignid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAdminCampaignByCampaignidDevicesGetWithHttpMessagesAsync(campaignid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a Device to a Campaign
            /// </summary>
            /// A device can only be in one campaign at a time.
            /// If a device is already in another campaign when this is called it will be
            /// removed from the old campaign.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='campaignid'>
            /// unique identifier for a campaign
            /// </param>
            /// <param name='deviceid'>
            /// unique identifier for a device
            /// </param>
            public static void ApiAdminCampaignByCampaignidDevicesByDeviceidPost(this IArgonneAPI operations, string campaignid, string deviceid)
            {
                Task.Factory.StartNew(s => ((IArgonneAPI)s).ApiAdminCampaignByCampaignidDevicesByDeviceidPostAsync(campaignid, deviceid), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a Device to a Campaign
            /// </summary>
            /// A device can only be in one campaign at a time.
            /// If a device is already in another campaign when this is called it will be
            /// removed from the old campaign.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='campaignid'>
            /// unique identifier for a campaign
            /// </param>
            /// <param name='deviceid'>
            /// unique identifier for a device
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAdminCampaignByCampaignidDevicesByDeviceidPostAsync(this IArgonneAPI operations, string campaignid, string deviceid, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiAdminCampaignByCampaignidDevicesByDeviceidPostWithHttpMessagesAsync(campaignid, deviceid, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Remove a device from a campaign
            /// </summary>
            /// Id must be a valid GUID.
            /// DeviceId must be a valid GUID.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='campaignid'>
            /// unique identifier for a Campaign
            /// </param>
            /// <param name='deviceid'>
            /// unique identifier for a device
            /// </param>
            public static void ApiAdminCampaignByCampaignidDevicesByDeviceidDelete(this IArgonneAPI operations, string campaignid, string deviceid)
            {
                Task.Factory.StartNew(s => ((IArgonneAPI)s).ApiAdminCampaignByCampaignidDevicesByDeviceidDeleteAsync(campaignid, deviceid), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove a device from a campaign
            /// </summary>
            /// Id must be a valid GUID.
            /// DeviceId must be a valid GUID.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='campaignid'>
            /// unique identifier for a Campaign
            /// </param>
            /// <param name='deviceid'>
            /// unique identifier for a device
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAdminCampaignByCampaignidDevicesByDeviceidDeleteAsync(this IArgonneAPI operations, string campaignid, string deviceid, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiAdminCampaignByCampaignidDevicesByDeviceidDeleteWithHttpMessagesAsync(campaignid, deviceid, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get All Impressions for a campaign
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='campaignid'>
            /// unique identifier for a campaign
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            public static IList<ImpressionDto> ApiAdminCampaignByCampaignidImpressionsGet(this IArgonneAPI operations, string campaignid, int? pageNumber = default(int?), int? pageSize = default(int?))
            {
                return Task.Factory.StartNew(s => ((IArgonneAPI)s).ApiAdminCampaignByCampaignidImpressionsGetAsync(campaignid, pageNumber, pageSize), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get All Impressions for a campaign
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='campaignid'>
            /// unique identifier for a campaign
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ImpressionDto>> ApiAdminCampaignByCampaignidImpressionsGetAsync(this IArgonneAPI operations, string campaignid, int? pageNumber = default(int?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAdminCampaignByCampaignidImpressionsGetWithHttpMessagesAsync(campaignid, pageNumber, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get All Impressions for a campaign
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='campaignid'>
            /// unique identifier for a campaign
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='after'>
            /// timestamp for start of series
            /// </param>
            public static IList<ImpressionDto> ApiAdminCampaignByCampaignidImpressionsAfterGet(this IArgonneAPI operations, string campaignid, int? pageNumber = default(int?), int? pageSize = default(int?), DateTime? after = default(DateTime?))
            {
                return Task.Factory.StartNew(s => ((IArgonneAPI)s).ApiAdminCampaignByCampaignidImpressionsAfterGetAsync(campaignid, pageNumber, pageSize, after), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get All Impressions for a campaign
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='campaignid'>
            /// unique identifier for a campaign
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='after'>
            /// timestamp for start of series
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ImpressionDto>> ApiAdminCampaignByCampaignidImpressionsAfterGetAsync(this IArgonneAPI operations, string campaignid, int? pageNumber = default(int?), int? pageSize = default(int?), DateTime? after = default(DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAdminCampaignByCampaignidImpressionsAfterGetWithHttpMessagesAsync(campaignid, pageNumber, pageSize, after, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the highest scoring (average) emotion for a campaign during an
            /// interval of time
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='campaignid'>
            /// unique identifier for a campaign
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='start'>
            /// timestamp for start of series
            /// </param>
            /// <param name='end'>
            /// timestamp for end of series
            /// </param>
            public static string ApiAdminCampaignByCampaignidEmotionsStrongestGet(this IArgonneAPI operations, string campaignid, int? pageNumber = default(int?), int? pageSize = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?))
            {
                return Task.Factory.StartNew(s => ((IArgonneAPI)s).ApiAdminCampaignByCampaignidEmotionsStrongestGetAsync(campaignid, pageNumber, pageSize, start, end), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the highest scoring (average) emotion for a campaign during an
            /// interval of time
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='campaignid'>
            /// unique identifier for a campaign
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='start'>
            /// timestamp for start of series
            /// </param>
            /// <param name='end'>
            /// timestamp for end of series
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiAdminCampaignByCampaignidEmotionsStrongestGetAsync(this IArgonneAPI operations, string campaignid, int? pageNumber = default(int?), int? pageSize = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAdminCampaignByCampaignidEmotionsStrongestGetWithHttpMessagesAsync(campaignid, pageNumber, pageSize, start, end, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Aggregated demographic and sentiment for a campaign during an interval of
            /// time
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='campaignid'>
            /// unique identifier for a campaign
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='start'>
            /// timestamp for start of series
            /// </param>
            /// <param name='end'>
            /// timestamp for end of series
            /// </param>
            public static IList<AdAggregateData> ApiAdminCampaignByCampaignidImpressionsAggregateGet(this IArgonneAPI operations, string campaignid, int? pageNumber = default(int?), int? pageSize = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?))
            {
                return Task.Factory.StartNew(s => ((IArgonneAPI)s).ApiAdminCampaignByCampaignidImpressionsAggregateGetAsync(campaignid, pageNumber, pageSize, start, end), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Aggregated demographic and sentiment for a campaign during an interval of
            /// time
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='campaignid'>
            /// unique identifier for a campaign
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='start'>
            /// timestamp for start of series
            /// </param>
            /// <param name='end'>
            /// timestamp for end of series
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AdAggregateData>> ApiAdminCampaignByCampaignidImpressionsAggregateGetAsync(this IArgonneAPI operations, string campaignid, int? pageNumber = default(int?), int? pageSize = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAdminCampaignByCampaignidImpressionsAggregateGetWithHttpMessagesAsync(campaignid, pageNumber, pageSize, start, end, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Aggregated demographic and sentiment for a campaign during an interval of
            /// time
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='campaignid'>
            /// unique identifier for a campaign
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='start'>
            /// timestamp for start of series
            /// </param>
            /// <param name='end'>
            /// timestamp for end of series
            /// </param>
            public static IList<CampaignAdAggregateData> ApiAdminCampaignByCampaignidImpressionsAggregatebyadGet(this IArgonneAPI operations, string campaignid, int? pageNumber = default(int?), int? pageSize = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?))
            {
                return Task.Factory.StartNew(s => ((IArgonneAPI)s).ApiAdminCampaignByCampaignidImpressionsAggregatebyadGetAsync(campaignid, pageNumber, pageSize, start, end), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Aggregated demographic and sentiment for a campaign during an interval of
            /// time
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='campaignid'>
            /// unique identifier for a campaign
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='start'>
            /// timestamp for start of series
            /// </param>
            /// <param name='end'>
            /// timestamp for end of series
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CampaignAdAggregateData>> ApiAdminCampaignByCampaignidImpressionsAggregatebyadGetAsync(this IArgonneAPI operations, string campaignid, int? pageNumber = default(int?), int? pageSize = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAdminCampaignByCampaignidImpressionsAggregatebyadGetWithHttpMessagesAsync(campaignid, pageNumber, pageSize, start, end, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all devices
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            public static IList<DeviceDto> ApiAdminDeviceGet(this IArgonneAPI operations, int? pageNumber = default(int?), int? pageSize = default(int?))
            {
                return Task.Factory.StartNew(s => ((IArgonneAPI)s).ApiAdminDeviceGetAsync(pageNumber, pageSize), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all devices
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DeviceDto>> ApiAdminDeviceGetAsync(this IArgonneAPI operations, int? pageNumber = default(int?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAdminDeviceGetWithHttpMessagesAsync(pageNumber, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new device
            /// </summary>
            /// Id field does not need to be supplied, it is ignored. The unique
            /// identifier for the device will be generated by the system.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='item'>
            /// </param>
            public static DeviceDto ApiAdminDevicePost(this IArgonneAPI operations, DeviceDto item = default(DeviceDto))
            {
                return Task.Factory.StartNew(s => ((IArgonneAPI)s).ApiAdminDevicePostAsync(item), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new device
            /// </summary>
            /// Id field does not need to be supplied, it is ignored. The unique
            /// identifier for the device will be generated by the system.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='item'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceDto> ApiAdminDevicePostAsync(this IArgonneAPI operations, DeviceDto item = default(DeviceDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAdminDevicePostWithHttpMessagesAsync(item, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a device by id
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// unique identifier for a device
            /// </param>
            public static DeviceDto ApiAdminDeviceByIdGet(this IArgonneAPI operations, string id)
            {
                return Task.Factory.StartNew(s => ((IArgonneAPI)s).ApiAdminDeviceByIdGetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a device by id
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// unique identifier for a device
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceDto> ApiAdminDeviceByIdGetAsync(this IArgonneAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAdminDeviceByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Modify an existing device
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// unique identifier for a device
            /// </param>
            /// <param name='updatedRecord'>
            /// modified device model
            /// </param>
            public static void ApiAdminDeviceByIdPut(this IArgonneAPI operations, string id, DeviceDto updatedRecord = default(DeviceDto))
            {
                Task.Factory.StartNew(s => ((IArgonneAPI)s).ApiAdminDeviceByIdPutAsync(id, updatedRecord), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Modify an existing device
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// unique identifier for a device
            /// </param>
            /// <param name='updatedRecord'>
            /// modified device model
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAdminDeviceByIdPutAsync(this IArgonneAPI operations, string id, DeviceDto updatedRecord = default(DeviceDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiAdminDeviceByIdPutWithHttpMessagesAsync(id, updatedRecord, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Delete an existing device
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// unique identifier for a device
            /// </param>
            public static void ApiAdminDeviceByIdDelete(this IArgonneAPI operations, string id)
            {
                Task.Factory.StartNew(s => ((IArgonneAPI)s).ApiAdminDeviceByIdDeleteAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an existing device
            /// </summary>
            /// Id must be a valid GUID
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// unique identifier for a device
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAdminDeviceByIdDeleteAsync(this IArgonneAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiAdminDeviceByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
